
[ClassVersion("1.0.0"),FriendlyName("xService")]
class DSC_xServiceResource : OMI_BaseResource
{
  [Key,Description("Indicates the service name. Note that sometimes this is different from the display name. You can get a list of the services and their current state with the Get-Service cmdlet.")] String Name;
  [Write,Description("Ensures that the service is present or absent. Defaults to Present."),ValueMap{"Present", "Absent"},Values{"Present", "Absent"}] String Ensure;
  [Write,Description("The path to the service executable file.")] String Path;
  [Write,Description("Indicates the startup type for the service."),ValueMap{"Automatic", "Manual", "Disabled"},Values{"Automatic", "Manual", "Disabled"}] String StartupType;
  [Write,Description("Indicates the sign-in account to use for the service."),ValueMap{"LocalSystem", "LocalService", "NetworkService"},Values{"LocalSystem", "LocalService", "NetworkService"}] String BuiltInAccount;
  [Write,Description("The Group Managed Service Account to run the service under.")] String GroupManagedServiceAccount;
  [Write,Description("The credential to run the service under."),EmbeddedInstance("MSFT_Credential")] String Credential;
  [Write,Description("The service can create or communicate with a window on the desktop. Must be false for services not running as LocalSystem. Defaults to False.")] Boolean DesktopInteract;
  [Write,Description("Indicates the state you want to ensure for the service. Defaults to Running."),ValueMap{"Running", "Stopped", "Ignore"},Values{"Running", "Stopped", "Ignore"}] String State;
  [Write,Description("The display name of the service.")] String DisplayName;
  [Write,Description("The description of the service.")] String Description;
  [Write,Description("An array of strings indicating the names of the dependencies of the service.")] String Dependencies[];
  [Write,Description("The time to wait for the service to start in milliseconds. Defaults to 30000.")] uint32 StartupTimeout;
  [Write,Description("The time to wait for the service to stop in milliseconds. Defaults to 30000.")] uint32 TerminateTimeout;
  [Write,Description("The time to wait for the Failure count to reset in seconds.")] UInt32 ResetPeriodSeconds;
  [Write,Description("The command line to run if a service fails.")] String FailureCommand;
  [Write,EmbeddedInstance("DSC_xFailureAction"),Description("The actions to take when a service fails.")] String FailureActionsCollection[];
  [Write,Description("A flag indicating whether failure actions should be invoked on non-crash failures.")] Boolean FailureActionsOnNonCrashFailures;
  [Write,Description("An optional broadcast message to send to logged in users if the machine reboots as a result of a failure action.")] String RebootMessage;
};

[ClassVersion("1.0.0")]
class DSC_xFailureAction
{
  [Write, Description("The action to take on failure"), ValueMap{"NONE", "RESTART", "REBOOT", "RUN_COMMAND"}, Values{"NONE", "RESTART", "REBOOT", "RUN_COMMAND"}] String Type;
  [Write, Description("Delay in milliseconds to wait before taking the specified action")] UInt32 DelayMilliSeconds;
};
